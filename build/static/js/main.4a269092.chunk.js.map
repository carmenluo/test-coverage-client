{"version":3,"sources":["api/index.ts","actions/reports.ts","store/report-store.ts","context/report-context.tsx","components/table.tsx","util.js","components/coverage-trend.tsx","components/base-coverage.tsx","components/pr-coverages.tsx","App.tsx","index.tsx"],"names":["url","getPrReports","a","axios","get","data","console","log","message","getBaseReport","ReportStore","baseReport","prReports","loadBaseReport","loadPrReports","makeAutoObservable","this","StoreContext","createContext","StoreProvider","store","children","Provider","value","useStore","useContext","Table","showAllRows","columns","handleShowAllRows","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","onClick","className","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","filter","row","i","getRowProps","cells","cell","getCellProps","optionsGraphic","custom","ticks","datalabels","labelString","graphProperti","display","stacked","typeAnalysisConcept","beginAtZero","userCallback","valueCopy","toString","split","join","typeChart","ctx","datasetIndex","chart","$totalizer","utmost","font","size","align","context","dataset","dataIndex","anchor","rotation","backgroundColor","active","formatter","stack","borderRadius","color","scales","xAxes","beforeUpdate","totals","datasets","forEach","isDatasetVisible","index","maxBarThickness","yAxes","position","scaleLabel","tooltips","enabled","intersect","mode","bodySpacing","cornerRadius","titleMarginBottom","plugins","offset","Math","round","CoverageTrendChart","baseReports","useState","showChart","setShowChart","reportsDates","createdAt","statementCoverage","JSON","parse","metric","statements","rate","labels","label","fill","borderColor","options","typeAnalysis","BaseCoverage","observer","setData","setShowAllRows","parseCoveragePercentage","covered","all","toFixed","useMemo","Header","accessor","useEffect","length","toJS","detailMetric","detailData","prUrl","branchName","_detailMetric","metrics","coveredstatements","coveredconditionals","conditionals","coveredmethods","methods","file","name","conditions","lines","tableData","branches","PrCoverages","undefined","reports","prReport","report","key","href","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.4a269092.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst url = \"https://test-coverage-report.herokuapp.com/reports\";\n\nexport const getReport = () => axios.get(url);\n\nexport const getPrReports = () => axios.get(`${url}/prs`);\n\nexport const getBaseReports = () => axios.get(`${url}/base`);\n","import * as api from \"../api/index\";\n\nexport const getMostRecentReport = async () => {\n  try {\n    const { data } = await api.getReport();\n    return data[data.length - 1];\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const getPrReports = async () => {\n  try {\n    const { data } = await api.getPrReports();\n\n    return data;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const getBaseReport = async () => {\n  try {\n    const { data } = await api.getBaseReports();\n    return data;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\n// export const postReport = async () => {\n//   try {\n//     const data = await api.postReport();\n//     return data;\n//   } catch (error) {\n//     console.log(error.message);\n//   }\n// };\n","import { observable, action, makeAutoObservable } from \"mobx\";\nimport { getBaseReport, getPrReports } from \"../actions/reports\";\n\nexport class ReportStore {\n  baseReport: Array<any> = [];\n  prReports: Array<any> = [];\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n  loadBaseReport = async () => {\n    const baseReport = await getBaseReport();\n    // console.log(baseReport);\n    this.baseReport = baseReport;\n  };\n  loadPrReports = async () => {\n    const prReports = await getPrReports();\n    this.prReports = prReports;\n  };\n}\n","import React, { Children, createContext, FC, useContext } from \"react\";\nimport { ReportStore } from \"../store/report-store\";\n\nconst StoreContext = createContext<ReportStore>(new ReportStore());\n\nconst StoreProvider: FC<{ store: ReportStore }> = ({ store, children }) => {\n  return (\n    <StoreContext.Provider value={store}>{children}</StoreContext.Provider>\n  );\n};\n\nconst useStore = () => {\n  return useContext(StoreContext);\n};\n\nexport { useStore, StoreProvider };\n","import React, { useState } from \"react\";\nimport { useTable } from \"react-table\";\nimport \"./table.css\";\n\nexport function Table({\n  showAllRows = true,\n  columns,\n  data,\n  handleShowAllRows,\n}: {\n  showAllRows?: boolean;\n  columns: any;\n  data: any;\n  handleShowAllRows?: () => void;\n}) {\n  // Use the state and functions returned from useTable to build your UI\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable({\n    columns,\n    data,\n  });\n\n  return (\n    <div>\n      <button onClick={handleShowAllRows}>See Detail coverage</button>\n      <table {...getTableProps()} className=\"coverage-table\">\n        <thead>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th {...column.getHeaderProps()}>{column.render(\"Header\")}</th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()} className=\"coverage-table-body\">\n          {rows\n            .filter((row, i) => {\n              if (!showAllRows) {\n                return i === 0;\n              }\n              return row;\n            })\n            .map((row, i) => {\n              prepareRow(row);\n              return (\n                <tr {...row.getRowProps()} className=\"coverage-table-body_row\">\n                  {row.cells.map((cell) => {\n                    return (\n                      <td\n                        {...cell.getCellProps()}\n                        className=\"coverage-table-body_row-body\"\n                      >\n                        {cell.render(\"Cell\")}\n                      </td>\n                    );\n                  })}\n                </tr>\n              );\n            })}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","/**\n * dataCost y dataQuantityt son las que se llaman en la propiedad de data del componente Bar o Line\n * Estos reciven dos parametros que son:\n * optionChart (int)  (1/2)\n * si recive 1 Se procesan las graficas cantidad y año eje Y. tipo y mes eje X, shapeDataChart1()\n * si recive 2 Se procesan las graficas cantidad y mes eje Y , tipo y año eje X. shapeDataChart2()\n * data: data puede llehar con dos tipos de formato dependiendo de la forma en que se quiera interpretar la info\n * para ver los timpos de formato ir: https://codesandbox.io/s/14pnzm2ov7 y en utils.js estan los ejemplos\n */\n\nexport const option1 = {\n  dataConcept: [\n    \"Enero\",\n    \"Frebrero\",\n    \"Marzo\",\n    \"Abril\",\n    \"Mayo\",\n    \"Junio\",\n    \"Julio\",\n    \"Agosto\",\n    \"Septiembre\",\n    \"Octube\",\n    \"Noviembre\",\n    \"Diciembre\",\n  ],\n  dataHistory: {\n    quantity: {\n      manual: [\n        {\n          concept: 2018,\n          arr: [2, 10, 20, 5, 2, 14, 12, 11, 12, 4, 1, 9],\n        },\n        {\n          concept: 2017,\n          arr: [22, 19, 27, 13, 22, 14, 27, 5, 13, 14, 5, 19],\n        },\n      ],\n      automatic: [\n        {\n          concept: 2018,\n          arr: [20, 9, 20, 35, 26, 23, 17, 27, 13, 22, 14, 27],\n        },\n        {\n          concept: 2017,\n          arr: [6, 30, 14, 8, 29, 17, 8, 22, 19, 27, 13, 14],\n        },\n        {\n          concept: 2016,\n          arr: [2, 9, 17, 10, 5, 20, 17, 15, 1, 4, 15, 19],\n        },\n      ],\n    },\n\n    cost: {\n      manual: [\n        {\n          concept: 2018,\n          arr: [120, 390, 170, 130, 120, 340, 70, 150, 230, 340, 100, 190],\n        },\n        {\n          concept: 2017,\n          arr: [220, 190, 270, 130, 220, 140, 270, 50, 130, 140, 50, 190],\n        },\n      ],\n      automatic: [\n        {\n          concept: 2018,\n          arr: [200, 90, 200, 350, 260, 230, 170, 270, 130, 220, 140, 270],\n        },\n        {\n          concept: 2017,\n          arr: [60, 300, 140, 80, 290, 170, 80, 220, 190, 270, 130, 140],\n        },\n        {\n          concept: 2016,\n          arr: [220, 190, 270, 130, 220, 140, 270, 50, 130, 140, 50, 190],\n        },\n      ],\n    },\n  },\n};\n\nconst option2 = {\n  dataConcept: [\"2016\", \"2017\", \"2018\"],\n  dataHistory: {\n    quantity: {\n      manual: [\n        {\n          concept: \"enero\",\n          arr: [0, 22, 12],\n        },\n        {\n          concept: \"febrero\",\n          arr: [0, 19, 39],\n        },\n        {\n          concept: \"Marzo\",\n          arr: [0, 27, 17],\n        },\n        {\n          concept: \"Abril\",\n          arr: [0, 13, 13],\n        },\n        {\n          concept: \"Mayo\",\n          arr: [0, 22, 12],\n        },\n        {\n          concept: \"Junio\",\n          arr: [0, 14, 34],\n        },\n        {\n          concept: \"Julio\",\n          arr: [0, 27, 7],\n        },\n        {\n          concept: \"Agosto\",\n          arr: [0, 5, 15],\n        },\n        {\n          concept: \"Septiembre\",\n          arr: [0, 13, 23],\n        },\n        {\n          concept: \"Octubre\",\n          arr: [0, 14, 34],\n        },\n        {\n          concept: \"Noviembre\",\n          arr: [0, 5, 10],\n        },\n        {\n          concept: \"Diciembre\",\n          arr: [0, 9, 19],\n        },\n      ],\n      automatic: [\n        {\n          concept: \"enero\",\n          arr: [22, 6, 20],\n        },\n        {\n          concept: \"febrero\",\n          arr: [19, 30, 9],\n        },\n        {\n          concept: \"Marzo\",\n          arr: [27, 14, 20],\n        },\n        {\n          concept: \"Abril\",\n          arr: [13, 8, 35],\n        },\n        {\n          concept: \"Mayo\",\n          arr: [22, 29, 26],\n        },\n        {\n          concept: \"Junio\",\n          arr: [14, 17, 23],\n        },\n        {\n          concept: \"Julio\",\n          arr: [27, 8, 17],\n        },\n        {\n          concept: \"Agosto\",\n          arr: [5, 22, 27],\n        },\n        {\n          concept: \"Septiembre\",\n          arr: [13, 19, 13],\n        },\n        {\n          concept: \"Octubre\",\n          arr: [14, 27, 22],\n        },\n        {\n          concept: \"Noviembre\",\n          arr: [5, 13, 14],\n        },\n        {\n          concept: \"Diciembre\",\n          arr: [19, 14, 27],\n        },\n      ],\n    },\n  },\n};\n\nconst tipeObject = (val) => ({\n  label: `${val.tipe}-${val.concept}`,\n  fill: false,\n  lineTension: 0.1,\n  borderWidth: 2,\n  hoverBorderWidth: 1,\n  borderCapStyle: \"butt\",\n  borderDash: [],\n  borderDashOffset: 0.0,\n  borderJoinStyle: \"miter\",\n  pointBorderWidth: 1,\n  pointHoverRadius: 5,\n  pointHoverBorderWidth: 2,\n  pointRadius: 1,\n  pointHitRadius: 10,\n  data: val.arr,\n  borderColor: val.colorMap,\n  backgroundColor: val.colorMap,\n  pointBorderColor: val.colorMap,\n  pointBackgroundColor: val.colorMap,\n  hoverBackgroundColor: val.color,\n  hoverBorderColor: val.color,\n  stack: val.tipe,\n});\n\nconst shapeDataChart1 = (data, concept) => {\n  const vecData = {\n    quantity: [],\n    cost: [],\n  };\n  const colorsMapA = [\n    \"rgba(75, 152, 282, 1)\",\n    \"rgba(75, 172, 252, 1)\",\n    \"rgba(75, 182, 222, 1)\",\n    \"rgba(75, 192, 192, 1)\",\n    \"rgba(75, 162, 282, 1)\",\n    \"rgba(75, 192, 162, 1)\",\n    \"rgba(75, 192, 132, 1)\",\n    \"rgba(75, 192, 102, 1)\",\n    \"rgba(75, 192, 72, 1)\",\n    \"rgba(75, 192, 42, 1)\",\n    \"rgba(75, 192, 12, 1)\",\n    \"rgba(75, 192, 0, 1)\",\n  ];\n  const colorsMapB = [\n    \"rgba(0, 99, 132, 1)\",\n    \"rgba(30, 99, 132, 1)\",\n    \"rgba(60, 99, 132, 1)\",\n    \"rgba(90, 99, 132, 1)\",\n    \"rgba(120, 99, 132, 1)\",\n    \"rgba(150, 99, 132, 1)\",\n    \"rgba(180, 99, 132, 1)\",\n    \"rgba(210, 99, 132, 1)\",\n    \"rgba(240, 99, 132, 1)\",\n    \"rgba(270, 99, 132, 1)\",\n    \"rgba(300, 99, 132, 1)\",\n    \"rgba(330, 99, 132, 1)\",\n  ];\n  const colorA = \"rgba(110, 19, 105, 1)\";\n  const colorB = \"rgba(75, 152, 282, 1)\";\n  // Se almacenan todos los datos de cantidad\n  data.manual.map((val, key) => {\n    let manual = [];\n    const valA = { ...val, tipe: \"M\", colorMap: colorsMapA, color: colorA };\n    const valB = { ...val, tipe: \"M\", colorMap: colorsMapB, color: colorB };\n    manual = key % 2 === 0 ? tipeObject(valA) : tipeObject(valB);\n    return vecData[`${concept}`].push(manual);\n  });\n  data.automatic.map((val, key) => {\n    let automatic = [];\n    const valA = { ...val, tipe: \"A\", colorMap: colorsMapA, color: colorA };\n    const valB = { ...val, tipe: \"A\", colorMap: colorsMapB, color: colorB };\n    automatic = key % 2 === 0 ? tipeObject(valA) : tipeObject(valB);\n    return vecData[`${concept}`].push(automatic);\n  });\n\n  return vecData;\n};\n\nconst shapeDataChart2 = () => {\n  const vecData = {\n    quantity: [],\n    cost: [],\n  };\n  const colorsMapA = [\n    \"rgba(75, 152, 282, 1)\",\n    \"rgba(75, 172, 252, 1)\",\n    \"rgba(75, 182, 222, 1)\",\n    \"rgba(75, 192, 192, 1)\",\n    \"rgba(75, 162, 282, 1)\",\n    \"rgba(75, 192, 162, 1)\",\n    \"rgba(75, 192, 132, 1)\",\n    \"rgba(75, 192, 102, 1)\",\n    \"rgba(75, 192, 72, 1)\",\n    \"rgba(75, 192, 42, 1)\",\n    \"rgba(75, 192, 12, 1)\",\n    \"rgba(75, 192, 0, 1)\",\n  ];\n  const colorsMapB = [\n    \"rgba(0, 99, 132, 1)\",\n    \"rgba(30, 99, 132, 1)\",\n    \"rgba(60, 99, 132, 1)\",\n    \"rgba(90, 99, 132, 1)\",\n    \"rgba(120, 99, 132, 1)\",\n    \"rgba(150, 99, 132, 1)\",\n    \"rgba(180, 99, 132, 1)\",\n    \"rgba(210, 99, 132, 1)\",\n    \"rgba(240, 99, 132, 1)\",\n    \"rgba(270, 99, 132, 1)\",\n    \"rgba(300, 99, 132, 1)\",\n    \"rgba(330, 99, 132, 1)\",\n  ];\n  const colorA = \"rgba(110, 19, 105, 1)\";\n  const colorB = \"rgba(75, 152, 282, 1)\";\n  const { dataHistory } = option2;\n\n  // Se almacenan todos los datos de cantidad\n  dataHistory.quantity.manual.map((val, key) => {\n    let manual = [];\n    const valA = { ...val, tipe: \"M\", colorMap: colorsMapA, color: colorA };\n    const valB = { ...val, tipe: \"M\", colorMap: colorsMapB, color: colorB };\n    manual = key % 2 === 0 ? tipeObject(valA) : tipeObject(valB);\n    return vecData.quantity.push(manual);\n  });\n  dataHistory.quantity.automatic.map((val, key) => {\n    let automatic = [];\n    const valA = { ...val, tipe: \"A\", colorMap: colorsMapA, color: colorA };\n    const valB = { ...val, tipe: \"A\", colorMap: colorsMapB, color: colorB };\n    automatic = key % 2 === 0 ? tipeObject(valA) : tipeObject(valB);\n    return vecData.quantity.push(automatic);\n  });\n\n  return vecData;\n};\n\nexport const dataCost = (custom) => {\n  switch (custom.typeAnalysis) {\n    case 1: {\n      const dataChart = shapeDataChart1(\n        custom.dataCost,\n        custom.typeAnalysisConcept\n      );\n      const datasets = dataChart.cost;\n      return {\n        labels: custom.dataConcept,\n        datasets,\n      };\n    }\n    case 2: {\n      const dataChart = shapeDataChart2();\n      const datasets = dataChart.cost;\n      return {\n        labels: option2.dataConcept,\n        datasets,\n      };\n    }\n    default: {\n      return {};\n    }\n  }\n};\nexport const dataQuantity = (custom) => {\n  switch (custom.typeAnalysis) {\n    case 1: {\n      const dataChart = shapeDataChart1(\n        custom.dataQuantity,\n        custom.typeAnalysisConcept\n      );\n      const datasets = dataChart.quantity;\n      return {\n        labels: custom.dataConcept,\n        datasets,\n      };\n    }\n    case 2: {\n      const dataChart = shapeDataChart2();\n      const datasets = dataChart.quantity;\n      return {\n        labels: option2.dataConcept,\n        datasets,\n      };\n    }\n    default: {\n      return {};\n    }\n  }\n};\n\nexport const optionsGraphic = (custom) => {\n  let ticks;\n  let datalabels;\n  let labelString = \"\";\n  const graphProperti = { display: true, stacked: false };\n  if (custom.typeAnalysisConcept === \"quantity\") {\n    labelString = \"quantity\";\n    ticks = {\n      beginAtZero: true,\n      userCallback(value) {\n        let valueCopy = value;\n        valueCopy = valueCopy.toString();\n        valueCopy = valueCopy.split(/(?=(?:...)*$)/);\n        valueCopy = valueCopy.join(\".\");\n        return `${valueCopy}`;\n      },\n    };\n  } else {\n    labelString = \"cost\";\n    ticks = {\n      beginAtZero: true,\n      userCallback(value) {\n        let valueCopy = value;\n        valueCopy = valueCopy.toString();\n        valueCopy = valueCopy.split(/(?=(?:...)*$)/);\n        valueCopy = valueCopy.join(\".\");\n        return `${valueCopy}$`;\n      },\n    };\n  }\n  if (custom.typeChart === \"bar\") {\n    graphProperti.display = (ctx) =>\n      ctx.datasetIndex === ctx.chart.$totalizer.utmost ||\n      ctx.datasetIndex === ctx.chart.$totalizer.utmost - 3;\n    graphProperti.stacked = true;\n    datalabels = {\n      font: { size: \"10\" },\n      align(context) {\n        const value = context.dataset.data[context.dataIndex];\n        return value > 0 ? \"end\" : \"start\";\n      },\n      anchor(context) {\n        const value = context.dataset.data[context.dataIndex];\n        return value > 0 ? \"end\" : \"start\";\n      },\n      rotation(context) {\n        const value = context.dataset.data[context.dataIndex];\n        return value > 0 ? 0 : 180 - 45;\n      },\n      backgroundColor(context) {\n        return context.active ? \"green\" : \"balck\";\n      },\n      formatter: (value, ctx) => (value !== 0 ? ctx.dataset.stack : \"0\"),\n      display: graphProperti.display,\n      borderRadius: 4,\n      color: \"white\",\n    };\n  } else {\n    datalabels = false;\n  }\n\n  return {\n    scales: {\n      xAxes: [\n        {\n          stacked: graphProperti.stacked, // si lo quiero encima del otro true/false\n          beforeUpdate: (context) => {\n            const totals = {};\n            let utmost = 0;\n            if (context) {\n              const { chart } = context;\n              chart.data.datasets.forEach((dataset, datasetIndex) => {\n                if (chart.isDatasetVisible(datasetIndex)) {\n                  utmost = datasetIndex;\n                  dataset.data.forEach((value, index) => {\n                    totals[index] = (totals[index] || 0) + value;\n                  });\n                }\n              });\n\n              chart.$totalizer = {\n                totals,\n                utmost,\n              };\n            }\n          },\n          maxBarThickness: 100,\n        },\n      ],\n      yAxes: [\n        {\n          stacked: graphProperti.stacked,\n          position: \"left\",\n          scaleLabel: {\n            display: true,\n            labelString,\n          },\n          ticks,\n        },\n      ],\n    },\n    tooltips: {\n      enabled: true,\n      intersect: true,\n      mode: \"x\",\n      bodySpacing: 10,\n      cornerRadius: 5,\n      titleMarginBottom: 10,\n    },\n    plugins: {\n      // Change options for ALL labels of THIS CHART\n      offset: 90,\n      datalabels,\n    },\n  };\n};\n","import { observer } from \"mobx-react-lite\";\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useStore } from \"../context/report-context\";\nimport { toJS } from \"mobx\";\nimport { Table } from \"./table\";\nimport ChartDataLabels from \"chartjs-plugin-datalabels\";\nimport { Line } from \"react-chartjs-2\";\nimport { optionsGraphic } from \"../util\";\n// import \"./coverage-trend.css\";\n\nconst options = {\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n      },\n    ],\n  },\n  plugins: {\n    datalabels: {\n      backgroundColor: function (context) {\n        return context.dataset.backgroundColor;\n      },\n      borderRadius: 4,\n      color: \"white\",\n      font: {\n        weight: \"bold\",\n      },\n      formatter: Math.round,\n      padding: 6,\n    },\n  },\n};\n\nexport function CoverageTrendChart({ baseReports }) {\n  const [showChart, setShowChart] = useState(false);\n  const reportsDates = baseReports.map((baseReport) => baseReport.createdAt);\n  const statementCoverage = baseReports.map(\n    (baseReport) => JSON.parse(baseReport.message).metric.statements.rate\n  );\n  const data = {\n    labels: [...reportsDates],\n    datasets: [\n      {\n        label: \"Statement Coverage\",\n        data: [...statementCoverage],\n        fill: false,\n        backgroundColor: \"rgb(255, 99, 132)\",\n        borderColor: \"rgba(255, 99, 132, 0.2)\",\n      },\n    ],\n  };\n  const custom = {\n    typeAnalysisConcept: \"quantity\",\n    typeChart: \"line\",\n    typeAnalysis: 1,\n  };\n  const handleClick = () => {\n    setShowChart(!showChart);\n  };\n  return (\n    <>\n      <button onClick={handleClick}>\n        {showChart ? \"Hide Chart\" : \"Show Chart\"}\n      </button>\n      {showChart && <Line data={data} options={optionsGraphic(custom)} />}\n    </>\n  );\n}\n","import { observer } from \"mobx-react-lite\";\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport { useStore } from \"../context/report-context\";\nimport { toJS } from \"mobx\";\nimport { Table } from \"./table\";\nimport { CoverageTrendChart } from \"./coverage-trend\";\n\nexport const BaseCoverage = observer(() => {\n  const [data, setData] = useState([]);\n  const [showAllRows, setShowAllRows] = useState(false);\n  const store = useStore();\n  const parseCoveragePercentage = (covered: number, all: number) => {\n    return ((100 * covered) / all).toFixed(2) + \"%\";\n  };\n  const handleShowAllRows = () => {\n    setShowAllRows(!showAllRows);\n  };\n  // Number.parseFloat(covered / all);\n  const columns = useMemo(\n    () => [\n      {\n        Header: \"File\",\n        accessor: \"file\",\n      },\n      {\n        Header: \"Statements\",\n        accessor: \"statements\",\n      },\n      {\n        Header: \"Conditions\",\n        accessor: \"conditions\",\n      },\n      {\n        Header: \"Methods\",\n        accessor: \"methods\",\n      },\n      { Header: \"Lines\", accessor: \"lines\" },\n    ],\n    []\n  );\n  useEffect(() => {\n    if (store.baseReport.length > 0) {\n      const { metric, detailMetric, prUrl, branchName } = JSON.parse(\n        toJS(store.baseReport[0]).message\n      );\n      let detailData = [];\n      if (detailMetric) {\n        detailData = detailMetric.map((_detailMetric) => {\n          const {\n            coveredstatements,\n            statements,\n            coveredconditionals,\n            conditionals,\n            coveredmethods,\n            methods,\n          } = _detailMetric.metrics;\n\n          return {\n            file: _detailMetric.name,\n            statements: parseCoveragePercentage(coveredstatements, statements),\n            conditions: parseCoveragePercentage(\n              coveredconditionals,\n              conditionals\n            ),\n            methods: parseCoveragePercentage(coveredmethods, methods),\n            lines: \"\",\n          };\n        });\n      }\n      const tableData = [\n        {\n          file: \"All\",\n          statements: metric.statements.rate + \"%\",\n          conditions: metric.branches.rate + \"%\",\n          methods: metric.methods.rate + \"%\",\n          lines: metric.lines.rate + \"%\",\n        },\n      ];\n      setData([...tableData, ...detailData]);\n    }\n  }, [store.baseReport.length]);\n\n  return store.baseReport.length > 0 ? (\n    <div>\n      <h2>Develop Coverage</h2>\n      <CoverageTrendChart baseReports={toJS(store.baseReport)} />\n      <Table\n        columns={columns}\n        data={data}\n        showAllRows={showAllRows}\n        handleShowAllRows={handleShowAllRows}\n      />\n    </div>\n  ) : null;\n});\n","import { observer } from \"mobx-react-lite\";\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport { useStore } from \"../context/report-context\";\nimport { toJS } from \"mobx\";\nimport \"./pr-coverages.css\";\n\nexport const PrCoverages = observer(() => {\n  const store = useStore();\n  const [data, setData] = useState([]);\n  const [baseCoverage, setBaseCoverage] = useState([\n    {\n      statements: undefined,\n      conditions: undefined,\n      methods: undefined,\n      lines: undefined,\n    },\n  ]);\n  const [coverage, setCoverage] = useState([\n    {\n      statements: undefined,\n      conditions: undefined,\n      methods: undefined,\n      lines: undefined,\n    },\n  ]);\n\n  const parseCoveragePercentage = (covered: number, all: number) => {\n    return ((100 * covered) / all).toFixed(2);\n  };\n  const reports = toJS(store.prReports);\n  let baseMetric;\n  let prMetric = [];\n  // Number.parseFloat(covered / all);\n  const columns = useMemo(\n    () => [\n      {\n        Header: \"File\",\n        accessor: \"file\",\n      },\n      {\n        Header: \"Statements\",\n        accessor: \"statements\",\n      },\n      {\n        Header: \"Conditions\",\n        accessor: \"conditions\",\n      },\n      {\n        Header: \"Methods\",\n        accessor: \"methods\",\n      },\n      { Header: \"Lines\", accessor: \"lines\" },\n    ],\n    []\n  );\n\n  useEffect(() => {\n    if (store.baseReport.length > 0) {\n      const { metric } = JSON.parse(toJS(store.baseReport[0]).message);\n      baseMetric = {\n        statements: metric.statements.rate,\n        conditions: metric.branches.rate,\n        methods: metric.methods.rate,\n        lines: metric.lines.rate,\n      };\n    }\n    if (store.prReports.length > 0) {\n      const { metric, detailMetric, prUrl, branchName } = JSON.parse(\n        toJS(store.prReports[2]).message\n      );\n      prMetric = store.prReports.map((prReport) => {\n        const { metric } = JSON.parse(toJS(prReport).message);\n        return {\n          statements: metric.statements.rate,\n          conditions: metric.branches.rate,\n          methods: metric.methods.rate,\n          lines: metric.lines.rate,\n        };\n      });\n\n      let detailData = [];\n      // if (detailMetric) {\n      //   detailData = detailMetric.map((_detailMetric) => {\n      //     const {\n      //       coveredstatements,\n      //       statements,\n      //       coveredconditionals,\n      //       conditionals,\n      //       coveredmethods,\n      //       methods,\n      //     } = _detailMetric.metrics;\n\n      //     return {\n      //       file: _detailMetric.name,\n      //       statements:\n      //         parseCoveragePercentage(coveredstatements, statements) + \"%\",\n      //       conditions:\n      //         parseCoveragePercentage(coveredconditionals, conditionals) + \"%\",\n      //       methods: parseCoveragePercentage(coveredmethods, methods) + \"%\",\n      //       lines: \"\",\n      //     };\n      //   });\n      // }\n      const tableData = [\n        {\n          file: \"All\",\n          statements: metric.statements.rate,\n          conditions: metric.branches.rate,\n          methods: metric.methods.rate,\n          lines: metric.lines.rate,\n        },\n      ];\n      setData([...tableData, ...detailData]);\n    }\n  }, [store.prReports.length]);\n\n  return store.prReports.length > 0 || store.baseReport.length > 0 ? (\n    // <Table columns={columns} data={data} />\n\n    <div className=\"pr-coverage\">\n      <h2>PR Coverages</h2>\n      <table className=\"pr-coverage__table\">\n        <thead>\n          <tr>\n            <th>PR</th>\n            <th>Statement</th>\n            <th>Conditions</th>\n            <th>Methods</th>\n            <th>Lines</th>\n          </tr>\n        </thead>\n        <tbody>\n          {reports.map((report, index) => {\n            return (\n              <tr>\n                <td>\n                  <a key={`${report.prUrl}-${index}`} href={report.prUrl}>\n                    {report.branchName}\n                  </a>\n                </td>\n                <td>\n                  {(\n                    JSON.parse(toJS(report).message).metric.statements.rate -\n                    58.8\n                  ).toFixed(2) + \"%\"}\n                </td>\n                <td>\n                  {(\n                    JSON.parse(toJS(report).message).metric.branches.rate -\n                    51.24\n                  ).toFixed(2) + \"%\"}\n                </td>\n                <td>\n                  {(\n                    JSON.parse(toJS(report).message).metric.methods.rate - 62.68\n                  ).toFixed(2) + \"%\"}\n                </td>\n                <td>\n                  {(\n                    JSON.parse(toJS(report).message).metric.lines.rate - 65.27\n                  ).toFixed(2) + \"%\"}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  ) : null;\n});\n","import { useLocalStore, observer } from \"mobx-react-lite\";\nimport React, { FC, useEffect, useMemo, useState } from \"react\";\nimport { getMostRecentReport } from \"./actions/reports\";\nimport { Table } from \"./components/table\";\nimport { useObserver } from \"mobx-react\";\n\nimport { BaseCoverage } from \"./components/base-coverage\";\nimport { useStore } from \"./context/report-context\";\nimport { PrCoverages } from \"./components/pr-coverages\";\nimport { option1 } from \"./util.js\";\nimport LineDemo from \"./components/line-demo\";\n\nconst App: FC = () => {\n  const [data, setData] = useState([]);\n\n  const store = useStore();\n  // const parseCoveragePercentage = (covered, all) =>\n  //   Number.parseFloat(covered / all).toFixed(2);\n  useEffect(() => {\n    store.loadBaseReport();\n    store.loadPrReports();\n  }, [store]);\n  // useEffect(() => {\n  //   const mostRecentReport = await getMostRecentReport();\n\n  //   const { metric, detailMetric, prUrl, branchName } = JSON.parse(\n  //     mostRecentReport.message\n  //   );\n  //   let detailData = [];\n  //   if (detailMetric) {\n  //     detailData = detailMetric.map((_detailMetric) => {\n  //       const {\n  //         coveredstatements,\n  //         statements,\n  //         coveredconditionals,\n  //         conditionals,\n  //         coveredmethods,\n  //         methods,\n  //       } = _detailMetric.metrics;\n\n  //       return {\n  //         file: _detailMetric.name,\n  //         statements: parseCoveragePercentage(coveredstatements, statements),\n  //         conditions: parseCoveragePercentage(\n  //           coveredconditionals,\n  //           conditionals\n  //         ),\n  //         methods: parseCoveragePercentage(coveredmethods, methods),\n  //         lines: \"\",\n  //       };\n  //     });\n  //   }\n  //   const tableData = [\n  //     {\n  //       file: \"All\",\n  //       statements: metric.statements.rate,\n  //       conditions: metric.branches.rate,\n  //       methods: metric.methods.rate,\n  //       lines: metric.lines.rate,\n  //     },\n  //   ];\n  //   setData([...tableData, ...detailData]);\n  // }, []);\n\n  return (\n    <div>\n      <div className=\"test-coverage__header\">BioRender Test Coverage</div>\n      <div className=\"test-coverage__base-coverage\">\n        {/* <LineDemo key={Math.random()} dataEle={option1} option={1} /> */}\n        <BaseCoverage />\n        {/* <Table columns={columns} data={data} /> */}\n      </div>\n      <div className=\"test-coverage__trends\"></div>\n      <div className=\"test-coverage__pr-coverages\">\n        <PrCoverages />\n        {/* <Table columns={columns} data={data} /> */}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import { Provider } from \"react-redux\";\n// import { createStore, applyMiddleware, compose } from \"redux\";\n// import thunk from \"redux-thunk\";\n\n// import { reducers } from \"./reducers\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { ReportStore } from \"./store/report-store\";\nimport { StoreProvider } from \"./context/report-context\";\nconst store = new ReportStore();\n\nReactDOM.render(\n  // <Provider store={store}>\n  <StoreProvider store={store}>\n    <App />\n  </StoreProvider>,\n  // </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}